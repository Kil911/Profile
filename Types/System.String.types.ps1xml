<?xml version="1.0" encoding="utf-8"?>
<Types>
  <Type>
    <Name>System.String</Name>
    <Members>
      <ScriptProperty>
        <Name>FromAbbreviatedHeading</Name>
        <GetScriptBlock>[OutputType([System.Double])]
param()
[Humanizer.HeadingExtensions]::FromAbbreviatedHeading($this)
        </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>Titleize</Name>
        <GetScriptBlock>[OutputType([System.String])]
param()
[Humanizer.InflectorExtensions]::Titleize($this)
        </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>Pascalize</Name>
        <GetScriptBlock>[OutputType([System.String])]
param()
[Humanizer.InflectorExtensions]::Pascalize($this)
        </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>Camelize</Name>
        <GetScriptBlock>[OutputType([System.String])]
param()
[Humanizer.InflectorExtensions]::Camelize($this)
        </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>Underscore</Name>
        <GetScriptBlock>[OutputType([System.String])]
param()
[Humanizer.InflectorExtensions]::Underscore($this)
        </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>Dasherize</Name>
        <GetScriptBlock>[OutputType([System.String])]
param()
[Humanizer.InflectorExtensions]::Dasherize($this)
        </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>Hyphenate</Name>
        <GetScriptBlock>[OutputType([System.String])]
param()
[Humanizer.InflectorExtensions]::Hyphenate($this)
        </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>Kebaberize</Name>
        <GetScriptBlock>[OutputType([System.String])]
param()
[Humanizer.InflectorExtensions]::Kebaberize($this)
        </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>FromMetric</Name>
        <GetScriptBlock>[OutputType([System.Double])]
param()
[Humanizer.MetricNumeralExtensions]::FromMetric($this)
        </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>Ordinalize</Name>
        <GetScriptBlock>[OutputType([System.String])]
param()
[Humanizer.OrdinalizeExtensions]::Ordinalize($this)
        </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>FromRoman</Name>
        <GetScriptBlock>[OutputType([System.Int32])]
param()
[Humanizer.RomanNumeralExtensions]::FromRoman($this)
        </GetScriptBlock>
      </ScriptProperty>

      <ScriptMethod>
        <Name>Humanize</Name>
        <Script>
                    [OutputType([System.String])]
                    param([Humanizer.LetterCasing]$LetterCasing = [Humanizer.LetterCasing]::Title)
                    [Humanizer.StringHumanizeExtensions]::Humanize($this, $LetterCasing)
        </Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Transform</Name>
        <Script>
                    [OutputType([System.String])]
                    param(
                        [Parameter(Mandatory)]
                        [ValidateSet("SentenceCase", "TitleCase", "LowerCase", "UpperCase")]
                        [string]$Case
                    )
                    $ToCase = [Humanizer.To]::$Case
                    [Humanizer.To]::Transform($this, $ToCase)
        </Script>
      </ScriptMethod>
      <ScriptProperty>
        <Name>SentenceCase</Name>
        <GetScriptBlock>
                    [OutputType([System.String])]
                    param()
                    [Humanizer.To]::Transform($this, [Humanizer.To]::SentenceCase)
        </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>TitleCase</Name>
        <GetScriptBlock>
                    [OutputType([System.String])]
                    param()
                    [Humanizer.To]::Transform($this, [Humanizer.To]::TitleCase)
        </GetScriptBlock>
      </ScriptProperty>
      <ScriptMethod>
        <Name>ToQuantity</Name>
        <Script>
                    [OutputType([System.String])]
                    param([Parameter(Mandatory)][int]$Count, [Humanizer.ShowQuantityAs]$ShowQuantityAs = [Humanizer.ShowQuantityAs]::Numeric)
                    [Humanizer.ToQuantityExtensions]::ToQuantity($this, $Count, $ShowQuantityAs)
        </Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Dehumanize</Name>
        <Script>
                    [OutputType([System.String])]
                    param()
                    [Humanizer.StringDehumanizeExtensions]::Dehumanize($this)
        </Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Truncate</Name>
        <Script>
                    [OutputType([System.String])]
                    param(
                        [Parameter(Mandatory)]
                        [int]$Length,

                        [ValidateSet("Characters","Words")]
                        [string]$Truncator = "Characters",

                        [string]$TruncationString,

                        [Humanizer.TruncateFrom]$From = "Right"
                    )

                    $truncatorString = "FixedNumberOf$Truncator"
                    $truncatorObj = [Humanizer.Truncator]::$truncatorString

                    if ($TruncationString) {
                        [Humanizer.TruncateExtensions]::Truncate($this, $Length, $TruncationString, $truncatorObj, $From)
                    }
                    else
                    {
                        [Humanizer.TruncateExtensions]::Truncate($this, $Length, $truncatorObj, $From)
                    }
        </Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>ToBase64</Name>
        <Script>
                    [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($this))
        </Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>FromBase64</Name>
        <Script>
                    [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($this))
        </Script>
      </ScriptMethod>
    </Members>
  </Type>
</Types>
